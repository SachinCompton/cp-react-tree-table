{"version":3,"sources":["mock-data-gen.js","DemoApp.js","index.js"],"names":["getRandomInt","min","max","Math","floor","random","fNameList","lNameList","getRandomName","concat","length","gNameList","cNameList","getRandomCompanyName","formatNumber","value","toString","replace","generateDepartments","data","count","expenses","employees","i","groups","generateGroups","push","name","contact","children","groupExpenses","groupEmployees","MOCK_DATA","departments","height","companyExpenses","companyEmployees","isWaldo","generateData","DemoApp","state","treeValue","TreeState","create","treeTableRef","React","createRef","handleOnChange","newValue","console","log","_this","setState","handleOnScroll","handleOnExpandAll","expandAll","handleOnCollapseAll","collapseAll","handleScrollTo","current","scrollTo","handleScrollToGroupWaldo","node","rowModel","findRowModel","expandAncestors","$state","top","renderHeaderCell","alignLeft","arguments","undefined","react_default","a","createElement","className","renderIndexCell","row","style","paddingLeft","metadata","depth","isExpanded","onClick","toggleChildren","disabled","hasChildren","renderEmployeesCell","renderExpensesCell","renderEditableCell","type","onChange","event","updateData","Object","objectSpread2","target","renderNodeCount","this","href","index_es","headerHeight","ref","onScroll","Column","renderCell","basis","grow","Component","ReactDOM","render","DemoApp_DemoApp","document","getElementById"],"mappings":"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","file":"static/js/main.55202f33.chunk.js","sourcesContent":["const COMPANY_MAX = 1000;\nconst DEPARTMENT_MAX = 10;\nconst GROUP_MAX = 5;\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getRandomBool = () => {\n  return Math.random() >= 0.5;\n}\n\nconst fNameList = ['Aiden', 'Makenzie', 'Florence', 'Doug', 'Camila', 'Violet', 'Selena', 'Dani', 'Jacob', 'Louise', 'Owen', 'Anais', 'Fred', 'Teagan', 'Caleb', 'William', 'Helen', 'Livia', 'Ron', 'George', 'Michael', 'Ethan', 'Barry', 'Shelby', 'Stephanie', 'Michael', 'Percy', 'Nina', 'Daphne', 'Aileen', 'Margaret', 'Sabrina', 'Lana', 'Evelynn', 'Makena', 'Jade', 'Bob', 'Benny'];\nconst lNameList = ['Porter', 'Higgs', 'Carter', 'Moss', 'Devonport', 'Curtis', 'Rycroft', 'Hopkinson', 'Ellery', 'Fall', 'Thompson', 'Payne', 'Wilton', 'Dempsey', 'Butler', 'Dallas', 'Thatcher', 'Bowen', 'Douglas', 'Tobin', 'Jacobs', 'Harvey', 'Ryan', 'Morris', 'Mooney', 'Egerton', 'Williams', 'Leslie', 'Buckley', 'Wellington', 'Saunders', 'Rowlands', 'Watt', 'Calderwood', 'Eastwood', 'Morley', 'Ross', 'Weatcroft'];\n\nconst getRandomName = () => {\n  return `${fNameList[getRandomInt(0, fNameList.length - 1)]} ${lNameList[getRandomInt(0, lNameList.length - 1)]}`;\n}\n\nconst gNameList = ['alpha', 'beta', 'gamma', 'delta', 'epsilon'];\nconst cNameList = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n\nconst getRandomCompanyName = () => {\n  return `Company ${cNameList[getRandomInt(0, cNameList.length - 1)]}${cNameList[getRandomInt(0, cNameList.length - 1)]}${cNameList[getRandomInt(0, cNameList.length - 1)]}${cNameList[getRandomInt(0, cNameList.length - 1)]}`;\n}\n\nconst getRandomGroupName = () => {\n  return `Group ${gNameList[getRandomInt(0, gNameList.length - 1)]}`;\n}\n\nconst formatNumber = (value) => {\n  return (value * 100).toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}\n\n\nexport const generateData = () => {\n  let data = [];\n  let count = 0;\n\n  for (let i = 0; i < COMPANY_MAX; i++) {\n    if (getRandomBool()) {\n      const departments = generateDepartments();\n\n      data.push({\n        data: {\n          name: getRandomCompanyName(),\n          expenses: formatNumber(departments.expenses),\n          employees: `${departments.employees}`,\n          contact: getRandomName(),\n        },\n        children: departments.data,\n        height: 32,\n      })\n\n      count+= departments.count;\n    } else {\n      const companyExpenses = getRandomInt(5, 100);\n      const companyEmployees = getRandomInt(5, 20);\n\n      data.push({\n        data: {\n          name: getRandomCompanyName(),\n          expenses: formatNumber(companyExpenses),\n          employees: `${companyEmployees}`,\n          contact: getRandomName(),\n          height: 32,\n        }\n      })\n    }\n\n    count++;\n  }\n\n  // Add a static record to showcase findRowModel & expandAncestors features \n  data.push({\n    data: { name: 'Company TEST', expenses: '124,000', employees: '52', contact: 'Dani Hopkinson' },\n    height: 32,\n    children: [\n      {\n        data: { name: 'Department 1', expenses: '108,000', employees: '47', contact: 'Livia Wilton' },\n        children: [\n          { data: { name: 'Group alpha', expenses: '4,000', employees: '2', contact: 'Michael Dempsey' } },\n          { data: { name: 'Group beta', expenses: '5,000', employees: '5', contact: 'Nina Harvey' } },\n          { data: { name: 'Group gamma', expenses: '12,000', employees: '10', contact: 'Teagan Tobin' } },\n          { data: { name: 'Group delta', expenses: '3,000', employees: '5', contact: 'Aileen Payne' } },\n          { data: { name: 'Group zeta', expenses: '40,000', employees: '13', contact: 'Fred Moss' } },\n          { data: { name: 'Group epsilon', expenses: '32,000', employees: '8', contact: 'Daphne Thatcher' } },\n          { data: { name: 'Group Waldo', expenses: '12,000', employees: '4', contact: 'Owen Ryan', isWaldo: true } },\n        ]\n      },\n      {\n        data: { name: 'Department 2', expenses: '16,000', employees: '5', contact: 'Aileen Morley' },\n        height: 32,\n      }\n    ]\n  });\n  count+= 10;\n\n  return {\n    data: data,\n    count: count,\n  }\n}\n\n\nconst generateDepartments = () => {\n  let data = [];\n  let count = 0;\n  let expenses = 0;\n  let employees = 0;\n\n  for (let i = 0; i < DEPARTMENT_MAX; i++) {\n    const groups = generateGroups();\n    data.push({\n      data: {\n        name: `Department ${i+1}`,\n        expenses: formatNumber(groups.expenses),\n        employees: `${groups.employees}`,\n        contact: getRandomName(),\n      },\n      children: groups.data,\n    });\n\n    employees+= groups.employees;\n    expenses+= groups.expenses;\n    count+= groups.count;\n    count++;\n  }\n\n  return {\n    data: data,\n    count: count,\n    employees: employees,\n    expenses: expenses,\n  }\n}\n\nconst generateGroups = () => {\n  let data = [];\n  let count = 0;\n  let expenses = 0;\n  let employees = 0;\n\n  for (let i = 0; i < GROUP_MAX; i++) {\n    const groupExpenses = getRandomInt(2, 100);\n    const groupEmployees = getRandomInt(2, 10);\n\n    data.push({\n      data: {\n        name: getRandomGroupName(),\n        expenses: formatNumber(groupExpenses),\n        employees: `${employees}`,\n        contact: getRandomName(),\n      },\n    });\n\n    employees+= groupEmployees;\n    expenses+= groupExpenses;\n    count++;\n  }\n\n  return {\n    data: data,\n    count: count,\n    employees: employees,\n    expenses: expenses,\n  }\n}\n","import React, { Component } from 'react';\n\nimport { TreeTable, TreeState } from 'cp-react-tree-table';\nimport { generateData } from './mock-data-gen';\n\n\nconst MOCK_DATA = generateData();\nexport default class DemoApp extends Component {\n  state = {\n    treeValue: TreeState.create(MOCK_DATA.data)\n  };\n\n  treeTableRef = React.createRef();\n\n  render() {\n    const { treeValue } = this.state;\n    \n    return (\n      <div className=\"wrapper\">\n        <header>\n          <section>\n            <div className=\"description\">\n              <h1>cp-react-tree-table</h1>\n              <p>A fast, efficient tree table component for ReactJS.</p>\n              <ul>\n               <li>\n                  <a href=\"https://constantin.software/cp-react-tree-table/docs/\">\n                    <span className=\"service\">Documentation</span>\n                  </a>\n                </li>\n                <li>\n                  <a href=\"https://github.com/constantin-p/cp-react-tree-table\">\n                    <span className=\"service\">GitHub</span>\n                    {/* <span className=\"name hide-mobile\"><u>cp-react-tree-table</u></span> */}\n                  </a>\n                </li>\n                <li>\n                  <a href=\"https://www.npmjs.com/package/cp-react-tree-table\">\n                    <span className=\"service\">npm</span>\n                    {/* <span className=\"name hide-mobile\"><u>cp-react-tree-table</u></span> */}\n                  </a>\n                </li>\n              </ul>\n            </div>\n\n            <div className=\"install-instructions\">\n              <p className=\"install-npm\">\n                npm install --save cp-react-tree-table\n              </p>\n              <div className=\"divider\"></div>\n              <p className=\"install-yarn\">\n                yarn add cp-react-tree-table\n              </p>\n            </div>\n          </section>\n        </header>\n        \n        <div className=\"controls\">\n          <div className=\"control-section\">\n            <span>Node count: {this.renderNodeCount(MOCK_DATA.count)}</span>\n          </div>\n          <div className=\"control-section\">\n            <button onClick={this.handleOnExpandAll}>Expand all</button>\n            <button onClick={this.handleOnCollapseAll}>Collapse all</button>\n            <button onClick={this.handleScrollTo}>Scroll to 1000px</button>\n            <button onClick={this.handleScrollToGroupWaldo}>Scroll to Group Waldo</button>\n          </div>\n        </div>\n\n        <TreeTable className=\"demo-tree-table\"\n          height=\"360\"\n          headerHeight=\"32\"\n\n          value={treeValue}\n          onChange={this.handleOnChange}\n\n          ref={this.treeTableRef}\n          onScroll={this.handleOnScroll}>\n          <TreeTable.Column renderCell={this.renderIndexCell} renderHeaderCell={this.renderHeaderCell('Name')} basis=\"180px\" grow=\"0\"/>\n          <TreeTable.Column renderCell={this.renderEditableCell} renderHeaderCell={this.renderHeaderCell('Contact person')}/>\n          <TreeTable.Column renderCell={this.renderEmployeesCell} renderHeaderCell={this.renderHeaderCell('Employees', false)}/>\n          <TreeTable.Column renderCell={this.renderExpensesCell} renderHeaderCell={this.renderHeaderCell('Expenses ($)', false)}/>\n        </TreeTable>\n      </div>\n    );\n  }\n\n  handleOnChange = (newValue) => {\n    console.log('newValue', newValue)\n    this.setState({ treeValue: newValue });\n  }\n\n  handleOnScroll = (newValue) => {\n    console.log('onScroll', newValue)\n  }\n\n  handleOnExpandAll = () => {\n    console.log('Expand all');\n    this.setState((state) => {\n      return {\n        treeValue: TreeState.expandAll(state.treeValue),\n      };\n    });\n  }\n\n  handleOnCollapseAll = () => {\n    console.log('Collapse all');\n    this.setState((state) => {\n      return {\n        treeValue: TreeState.collapseAll(state.treeValue)\n      };\n    });\n  }\n\n  handleScrollTo = () => {\n    console.log('Scroll to \"1000px\"');\n    if (this.treeTableRef.current != null) {\n      this.treeTableRef.current.scrollTo(1000);\n    }\n  }\n\n  handleScrollToGroupWaldo = () => {\n    console.log('Scroll to \"Group Waldo\"');\n    const { treeValue } = this.state;\n    const node = MOCK_DATA.data[MOCK_DATA.data.length - 1].children[0].children[0];\n\n    const rowModel = treeValue.findRowModel(node);\n    if (rowModel != null) {\n      this.setState({\n        treeValue: TreeState.expandAncestors(treeValue, rowModel),\n      }, () => {\n        if (this.treeTableRef.current != null) {\n          this.treeTableRef.current.scrollTo(treeValue.findRowModel(node).$state.top);\n        }\n      });\n    }\n  }\n  \n\n  renderHeaderCell = (name, alignLeft = true) => {\n    return () => {\n      return (\n        <span className={alignLeft ? 'align-left' : 'align-right'}>{name}</span>\n      );\n    }\n  }\n\n  renderIndexCell = (row) => {\n    return (\n      <div style={{ paddingLeft: (row.metadata.depth * 15) + 'px'}}>\n        <button className={`toggle-button ${row.$state.isExpanded ? 'expanded' : ''}`}\n          onClick={row.toggleChildren}\n          disabled={!row.metadata.hasChildren}>\n          <span className={row.data.isWaldo ? 'is-waldo' : ''}>{row.data.name}</span>\n        </button>\n      </div>\n    );\n  }\n\n  renderEmployeesCell = (row) => {\n    return (\n      <span className=\"employees-cell\">{row.data.employees}</span>\n    );\n  }\n\n  renderExpensesCell = (row) => {\n    return (\n      <span className=\"expenses-cell\">{row.data.expenses}</span>\n    );\n  }\n\n  renderEditableCell = (row) => {\n    return (\n      <input type=\"text\" value={row.data.contact}\n        onChange={(event) => {\n          row.updateData({\n            ...row.data,\n            contact: event.target.value,\n          });\n        }}/>\n    );\n  }\n\n  renderNodeCount = (value) => {\n    return (\n      <span className=\"node-count\">{value.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')}</span>\n    );\n  }\n}\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport './header.css';\nimport './table.css';\nimport './responsive.css';\nimport DemoApp from './DemoApp';\n\nReactDOM.render(\n  <DemoApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}